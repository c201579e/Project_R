variance.model = list(model = "sGARCH", garchOrder=c(3,3)),
#Use ARIMA(1,1,1) for Mean model.
mean.model = list(armaOrder = c(3,1,4), arfima = T),
#Assume skewed-Student t distribution for Residual
distribution.model = "sstd")
#AIC of ARIMA(3,1,4)-GARCH(3,3)。
fit.sg <- ugarchfit(spec.sg, n225$LogReturn)
aic.sg <- infocriteria(fit.sg)[1]
#AIC of ARIMA(3,1,4)-GARCH(3,3)。
fit.sg <- ugarchfit(spec.sg, n225)
aic.sg <- infocriteria(fit.sg)[1]
head(sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg, sp)
aic.sg <- infocriteria(fit.sg)[1]
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg, sp,solver.control = list(tol = 1e-12))
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder=c(3,3)),
#Use ARIMA(1,1,1) for Mean model.
mean.model = list(armaOrder = c(1,1,1,), arfima = T),
#Assume skewed-Student t distribution for Residual
distribution.model = "sstd")
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder=c(3,3)),
#Use ARIMA(1,1,1) for Mean model.
mean.model = list(armaOrder = c(1,1,1), arfima = T),
#Assume skewed-Student t distribution for Residual
distribution.model = "sstd")
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg, sp,solver.control = list(tol = 1e-12))
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg,solver.control = list(tol = 1e-12),sp)
show(fit.sg)
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder=c(3,0)),
#Use ARIMA(1,1,1) for Mean model.
mean.model = list(armaOrder = c(1,1,1), arfima = T),
#Assume skewed-Student t distribution for Residual
distribution.model = "sstd")
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg,solver.control = list(tol = 1e-12),sp)
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder=c(0,0)),
#Use ARIMA(1,1,1) for Mean model.
mean.model = list(armaOrder = c(1,1,1), arfima = T),
#Assume skewed-Student t distribution for Residual
distribution.model = "sstd")
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg,solver.control = list(tol = 1e-12),sp)
show(fit.sg)
fit.sg1 <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(0, 0),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(1, 1))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(spec.sg,solver.control = list(tol = 1e-12),sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
fit.sg <- ugarchfit(fit.sg1,solver.control = list(tol = 1e-12),sp)
aic.sg <- infocriteria(fit.sg)[1]
aic.sg <- infocriteria(fit.sg1)[1]
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "sGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
aic.sg <- infocriteria(spec.sg)[1]
#eGARCH(3,3)。
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#eGARCH(3,3)。
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "sGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
aic.sg <- infocriteria(spec.sg)[1]
#eGARCH(3,3)。
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#eGARCH(3,3)。
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "sGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#eGARCH(3,3)。
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(0, 0))),
solver.control = list(tol = 1e-12),data = sp)
#eGARCH(3,3)。
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(0,0),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(1,1))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-eGARCH(3,0)。
aic.eg <- infocriteria(fit.eg)[1]
#Compare AIC of sGARCH and eGARCH
print(c(aic.sg = aic.sg, aic.eg = aic.eg))
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, n225$LogReturn,
#predict per 100 minutes data.
refit.every = 100,
#predict 1 minute ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-500, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 minutes data.
refit.every = 100,
#predict 1 minute ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-500, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 minutes data.
refit.every = 100,
#predict 1 minute ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-100, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
show(spec.eg)
PP.test(sp)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-10, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#packages required
installer(c("rugarch","snow","xts","forecast"))
```{r data implementation}
#Use sp500ret data
#data(sp500ret)
nikkei <- read.csv(file="N225.csv")
n225<- as.xts(read.zoo(nikkei,header=TRUE,sep=","))
head(n225)
#Function: Seach for the most suitable value for ARIMA
sp <- n225$LogReturn
hosts <- rep("localhost",2)
#Two Types of Variables will occur error. Only use for finding Suitable Variables
#clusterCall(cl,sp.arima <-
#              apply(expand.grid(1:5,1,0:5), 1, function(x) { try(
#                arima(sp500ret$SP500RET,order=x),TRUE)}))
#stopCluster(cl)
#opt.sp.arima <- Reduce(function(x,y) if(x$aic < y$aic){x} else{y}, sp.arima)
opt.au.arima <- auto.arima(sp,max.d=1,stepwise=T,trace=T)
#plot REsiduals and ACF from ARIMA model
tsdiag(opt.au.arima,10)
#Loop Function: Search for the most suitable value for GARCH
sp.garch <- as.list(NULL)
i <- 1; for (P in 1:5){ for (Q in 0:5){
sp.garch[[i]] <- try(eval(parse(text =
paste("garchFit( ~ garch(",P,",",Q,"),data =n225$LogReturn, trace=FALSE)")
)),silent=TRUE)
i <- i + 1}}
i <- 1; for (P in 1:5){ for (Q in 0:5){
sp.garch[[i]] <- try(eval(parse(text =
paste("garchFit( ~ garch(",P,",",Q,"),data =n225$LogReturn, trace=FALSE)")
)),silent=TRUE)
i <- i + 1}}
opt.sp.garch <-
Reduce(function(x,y) if(x@fit$ics[1] < y@fit$ics[1]){x}else{y}, sp.garch)
opt.sp.garch
#Most suitable value: GARCH(3,0)
#GARCH(3,3)。
spec.sg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "sGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
aic.sg <- infocriteria(spec.sg)[1]
#eGARCH(1,1)。
#eGARCH does not converges when we use garchOrder(3,0) as like in sGARCH(basic GARCH model)
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(0,0),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(1,1))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-eGARCH(3,0)。
aic.eg <- infocriteria(fit.eg)[1]
#Compare AIC of sGARCH and eGARCH
print(c(aic.sg = aic.sg, aic.eg = aic.eg))
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-10, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Installation of needed packages if it is not installed
#Installing function
installer <- function(x){
for( i in x ){
#  If we can load the package, return TRUE
if( ! require( i , character.only = TRUE ) ){
# cannot load, then install packages
install.packages( i , dependencies = TRUE )
#  after installation, load the -package
require( i , character.only = TRUE )
}
}
}
#packages required
installer(c("rugarch","snow","xts","forecast"))
#Use sp500ret data
#data(sp500ret)
nikkei <- read.csv(file="N225.csv")
n225<- as.xts(read.zoo(nikkei,header=TRUE,sep=","))
head(n225)
#Function: Seach for the most suitable value for ARIMA
sp <- n225$LogReturn
hosts <- rep("localhost",2)
#Two Types of Variables will occur error. Only use for finding Suitable Variables
#clusterCall(cl,sp.arima <-
#              apply(expand.grid(1:5,1,0:5), 1, function(x) { try(
#                arima(sp500ret$SP500RET,order=x),TRUE)}))
#stopCluster(cl)
#opt.sp.arima <- Reduce(function(x,y) if(x$aic < y$aic){x} else{y}, sp.arima)
opt.au.arima <- auto.arima(sp,max.d=1,stepwise=T,trace=T)
#plot REsiduals and ACF from ARIMA model
tsdiag(opt.au.arima,10)
i <- 1; for (P in 1:5){ for (Q in 0:5){
sp.garch[[i]] <- try(eval(parse(text =
paste("garchFit( ~ garch(",P,",",Q,"),data =n225$LogReturn, trace=FALSE)")
)),silent=TRUE)
i <- i + 1}}
#Loop Function: Search for the most suitable value for GARCH
sp.garch <- as.list(NULL)
i <- 1; for (P in 1:5){ for (Q in 0:5){
sp.garch[[i]] <- try(eval(parse(text =
paste("garchFit( ~ garch(",P,",",Q,"),data =n225$LogReturn, trace=FALSE)")
)),silent=TRUE)
i <- i + 1}}
opt.sp.garch <-
Reduce(function(x,y) if(x@fit$ics[1] < y@fit$ics[1]){x}else{y}, sp.garch)
opt.sp.garch
opt.sp.garch <-
Reduce(function(x,y) if(x@fit$ics[1] < y@fit$ics[1]){x}else{y}, sp.garch)
#Most suitable value: GARCH(3,0)
#GARCH(3,0)。
spec.sg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "sGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-GARCH(3,0)。
aic.sg <- infocriteria(spec.sg)[1]
#eGARCH(1,1)。
#eGARCH does not converges when we use garchOrder(3,0) as like in sGARCH(basic GARCH model)
spec.eg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(0,0),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(1,1))),
solver.control = list(tol = 1e-12),data = sp)
#AIC of ARIMA(3,1,4)-eGARCH(3,0)。
aic.eg <- infocriteria(fit.eg)[1]
#AIC of ARIMA(3,1,4)-eGARCH(3,0)。
aic.eg <- infocriteria(spec.eg)[1]
#Compare AIC of sGARCH and eGARCH
print(c(aic.sg = aic.sg, aic.eg = aic.eg))
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-10, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#eGARCH(1,1)。
#eGARCH does not converges when we use garchOrder(3,0) as like in sGARCH(basic GARCH model)
spec.eg <- ugarchspec(mean.model = list(armaOrder = c(0,0),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(1,1))))
#eGARCH(1,1)。
#eGARCH does not converges when we use garchOrder(3,0) as like in sGARCH(basic GARCH model)
spec.eg <- ugarchspec(mean.model = list(armaOrder = c(0,0),
include.mean = TRUE), variance.model = list(model = "eGARCH", garchOrder = c(1,1)))
#AIC of ARIMA(3,1,4)-eGARCH(3,0)。
fit.eg <- ugarchfit(spec.eg,sp)
aic.eg <- infocriteria(fit)[1]
aic.eg <- infocriteria(fit.eg)[1]
#Compare AIC of sGARCH and eGARCH
print(c(aic.sg = aic.sg, aic.eg = aic.eg))
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(x)-10, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(sp)-10, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(sp)-100, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 100,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(sp)-50, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
help(ugarchroll)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 59,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = nrow(sp)-50, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
nrow(sp)
#Prediction of Volatility
roll.eg <- ugarchroll(
spec.eg, sp,
#predict per 100 days data.
refit.every = 59,
#predict 1 day ahead.
n.ahead = 1,
#Assign the start point of prediction
#Use forecast.length or n.start to predict
n.start = 150, #predict from 500 minutes ahead. dataframe contains 5523 datas.
refit.window = "moving", solver = "hybrid", keep.coef = TRUE)
#Show the Result of Volatility Prediction
show(roll.eg)
#Convert ugarchroll to data.frame
df.eg <- as.data.frame(roll.eg)
#plot predicted volatility
png(f1, width = 800, height = 600)
plot(df.eg[, 'Sigma', drop = FALSE]$Sigma,type="l")
#plot predicted volatility
#png(f1, width = 800, height = 600)
plot(df.eg[, 'Sigma', drop = FALSE]$Sigma,type="l")
#Compare with LogReturn of 1min data of Gemini
png(f2, width = 800, height = 600)
#Compare with LogReturn of 1min data of Gemini
#png(f2, width = 800, height = 600)
plot(tail(x,n=500)$LogReturn)
#Compare with LogReturn of 1min data of Gemini
#png(f2, width = 800, height = 600)
plot(tail(sp,n=500)$LogReturn)
#i <- 1; for (P in 1:5){ for (Q in 0:5){
#  sp.garch[[i]] <- try(eval(parse(text =
#             paste("garchFit( ~ garch(",P,",",Q,"),data =sp, trace=FALSE)")
#  )),silent=TRUE)
#  i <- i + 1}}
#opt.sp.garch <-
#  Reduce(function(x,y) if(x@fit$ics[1] < y@fit$ics[1]){x}else{y}, sp.garch)
#opt.sp.garch
#Most suitable value: GARCH(3,0)
#GARCH(3,0)。
spec.sg <- ugarchfit(spec = ugarchspec(mean.model = list(armaOrder = c(3,1,4),
include.mean = TRUE), variance.model = list(model = "sGARCH", garchOrder = c(3, 0))),
solver.control = list(tol = 1e-12),data = sp)
#additional thing: to see whether we can have higher return than buy&hold by using
#                   predicted volatility.
sigma <- df.eg[, 'Sigma', drop = FALSE]$Sigma
const <- sd(head(sp,n=5000)$LogReturn)^2
leverage <- const / sigma^2
leverage <- const / sigma^2
#return of buy&hold
prod(1 + sp)
#return of OVS
prod(1 + sp*leverage)
#additional thing: to see whether we can have higher return than buy&hold by using
#                   predicted volatility.
sp_s<- tail(sp,n=255)$LogReturn
sigma <- df.eg[, 'Sigma', drop = FALSE]$Sigma
const <- sd(head(sp,n=200)$LogReturn)^2
leverage <- const / sigma^2
#return of buy&hold
prod(1 + sp_s)
#return of OVS
prod(1 + sp_s*leverage)
#additional thing: to see whether we can have higher return than buy&hold by using
#                   predicted volatility.
sp_s<- tail(sp,n=100)$LogReturn
sigma <- df.eg[, 'Sigma', drop = FALSE]$Sigma
const <- sd(head(sp,n=200)$LogReturn)^2
leverage <- const / sigma^2
#return of buy&hold
prod(1 + sp_s)
#return of OVS
prod(1 + sp_s*leverage)
sigma
sp_s
sp_s*leverage
length(sp_s)
length(leverage)
const <- sd(head(sp,n=195)$LogReturn)^2
leverage <- const / sigma^2
length(leverage)
#additional thing: to see whether we can have higher return than buy&hold by using
#                   predicted volatility.
sp_s<- tail(sp,n=105)$LogReturn
const <- sd(head(sp,n=200)$LogReturn)^2
leverage <- const / sigma^2
#return of buy&hold
prod(1 + sp_s)
#return of OVS
prod(1 + sp_s*leverage)
require(rmarkdown)
render("test.Rmd", output_format = "pdf_document")
require(rmarkdown)
render("GarchPred.Rmd", output_format = "pdf_document")
install.packages("devtools")
library("devtools")
devtools::install_github("naqtn/rmarkdownJa")
knitr::opts_chunk$set(echo = TRUE)
#Function: Seach for the most suitable value for ARIMA
sp <- n225$LogReturn
hosts <- rep("localhost",2)
#cl <- makeCluster(hosts,type="SOCK"); clusterExport(cl,"sp")
#Two Types of Variables will occur error. Only use for finding Suitable Variables
#clusterCall(cl,sp.arima <-
#              apply(expand.grid(1:5,1,0:5), 1, function(x) { try(
#                arima(sp500ret$SP500RET,order=x),TRUE)}))
#stopCluster(cl)
#opt.sp.arima <- Reduce(function(x,y) if(x$aic < y$aic){x} else{y}, sp.arima)
opt.au.arima <- auto.arima(sp,max.d=1,stepwise=T,trace=T)
#Function: Seach for the most suitable value for ARIMA
sp <- n225$LogReturn
hosts <- rep("localhost",2)
#cl <- makeCluster(hosts,type="SOCK"); clusterExport(cl,"sp")
#Two Types of Variables will occur error. Only use for finding Suitable Variables
#clusterCall(cl,sp.arima <-
#              apply(expand.grid(1:5,1,0:5), 1, function(x) { try(
#                arima(sp500ret$SP500RET,order=x),TRUE)}))
#stopCluster(cl)
#opt.sp.arima <- Reduce(function(x,y) if(x$aic < y$aic){x} else{y}, sp.arima)
opt.au.arima <- auto.arima(sp,max.d=1,stepwise=T,trace=T)
#######################################
#Volatility Prediction by E-GARCH Model
#######################################
# Note: this process could take a couple of minutes
#Installation of needed packages if it is not installed
#Installing function
installer <- function(x){
for( i in x ){
#  If we can load the package, return TRUE
if( ! require( i , character.only = TRUE ) ){
# cannot load, then install packages
install.packages( i , dependencies = TRUE )
#  after installation, load the -package
require( i , character.only = TRUE )
}
}
}
#packages required
installer(c("rugarch","snow","xts","forecast"))
#Use sp500ret data
#data(sp500ret)
nikkei <- read.csv(file="N225.csv")
lengrth(roll.eg)
length(roll.eg)
attributes(roll.eg)
